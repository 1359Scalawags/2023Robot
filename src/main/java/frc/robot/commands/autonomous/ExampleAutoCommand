public Command getAutonomousCommand() {
    // This will load the file "5 Ball.path" and generate it with a max velocity of 4 m/s and a max acceleration of 3 m/s^2
    // for every path in the group
    ArrayList<PathPlannerTrajectory> pathGroup = PathPlanner.loadPathGroup("5 Ball", new PathConstraints(4, 3));

    // This is just an example event map. It would be better to have a constant, global event map
    // in your code that can be used repeatedly.
    HashMap<String, Command> eventMap = new HashMap<>();
    eventMap.put("shooterStart", new ShooterSetRPM(5000));
    eventMap.put("intakeDown", new IntakeDown());
    eventMap.put("intakeOn", new IntakeRun());
    eventMap.put("intakeOff", new IntakeStop());
    eventMap.put("turnToTarget", new DriveTurnToTarget());
    eventMap.put("shoot", new ShooterShoot());

    // Create the AutoBuilder. This only needs to be created once when robot code starts, 
    // not every time you want to create an auto command. A good place to put this is 
    // in RobotContainer along with your subsystems.
    SwerveAutoBuilder autoBuilder = new SwerveAutoBuilder(
        driveSubsystem::getPose, // Pose2d supplier
        driveSubsystem::resetPose, // Pose2d consumer, used to reset odometry at the beginning of auto
        driveSubsystem.kinematics, // SwerveDriveKinematics
        new PIDConstants(5.0, 0.0, 0.0), // PID constants to correct for translation error (used to create the X and Y PID controllers)
        new PIDConstants(0.5, 0.0, 0.0), // PID constants to correct for rotation error (used to create the rotation controller)
        driveSubsystem::setModuleStates, // Module states consumer used to output to the drive subsystem
        eventMap,
        driveSubsystem // The drive subsystem. Used to properly set the requirements of path following commands
    );

    return autoBuilder.fullAuto(pathGroup);
}